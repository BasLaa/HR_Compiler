# expr ::= or_expr [if expr else expr]
# or_expr ::= and_expr {or and_expr}
# and_expr ::= not_expr {and not_expr}
# not_expr ::= not expr | cexpr

# cexpr     -> aexpr [ rel_op aexpr ]
# rel_op    -> == | != | ... | is
# aexpr     -> mexpr { add_op mexpr }
# add_op    -> + | - 
# mexpr     -> nexpr { mul_op nexpr }
# mul_op    -> * | // | %
# nexpr -> - nexpr | mem_or_ind_expr
# mem_or_ind_expr   -> fexpr { . id_or_func | '[' expr ']' }
# id_or_func -> ID [ '(' [expr {, expr } ] ')' ]

# fexpr -> [ [[expr {, expr}]]? ]
#          | ( expr )
#          | literal
#          | id_or_func
